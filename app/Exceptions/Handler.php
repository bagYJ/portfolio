<?php

namespace App\Exceptions;

use Illuminate\Auth\Access\AuthorizationException;
use Illuminate\Auth\AuthenticationException;
use Illuminate\Foundation\Exceptions\Handler as ExceptionHandler;
use Illuminate\Support\Facades\Log;
use Illuminate\Validation\ValidationException;
use Psr\Log\LogLevel;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException;
use Symfony\Component\HttpKernel\Exception\BadRequestHttpException;
use Symfony\Component\HttpKernel\Exception\MethodNotAllowedHttpException;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
use Symfony\Component\HttpKernel\Exception\TooManyRequestsHttpException;
use Throwable;

class Handler extends ExceptionHandler
{
    /**
     * A list of exception types with their corresponding custom log levels.
     *
     * @var array<class-string<Throwable>, LogLevel::*>
     */
    protected $levels = [
        //
    ];

    /**
     * A list of the exception types that are not reported.
     *
     * @var array<int, class-string<Throwable>>
     */
    protected $dontReport = [
        //
    ];

    protected array $dontSlackNoti = [
        NotFoundHttpException::class,
        AuthenticationException::class,
        MethodNotAllowedHttpException::class,
        ValidationException::class
    ];

    /**
     * A list of the inputs that are never flashed to the session on validation exceptions.
     *
     * @var array<int, string>
     */
    protected $dontFlash = [
        'current_password',
        'password',
        'password_confirmation',
    ];

    /**
     * Register the exception handling callbacks for the application.
     */
    public function register(): void
    {
        $this->reportable(function (Throwable $e) {
            if (!in_array(get_class($e), $this->dontSlackNoti)) {
                if (app()->bound('sentry')) {
                    app('sentry')->captureException($e);
                }
            }
        });
    }

    public function report(Throwable $e)
    {
        parent::report($e); // TODO: Change the autogenerated stub
    }

    public function render($request, Throwable $e): Response
    {
        $httpStatus = match (get_class($e)) {
            ValidationException::class, BadRequestHttpException::class => 400,
            AuthenticationException::class, AuthorizationException::class => 401,
            AccessDeniedHttpException::class => 403,
            NotFoundHttpException::class => 404,
            MethodNotAllowedHttpException::class => 405,
            TooManyRequestsHttpException::class => 429,
            default => 500
        };
        $code = $e->getCode() == 0 ? 9999 : sprintf('%04d', $e->getCode());

        return response()->json([
            'code' => $code,
            'result_code' => $code,
            'message' => $e->getMessage(),
            'result_msg' => $e->getMessage()
        ], $httpStatus);
    }
}
